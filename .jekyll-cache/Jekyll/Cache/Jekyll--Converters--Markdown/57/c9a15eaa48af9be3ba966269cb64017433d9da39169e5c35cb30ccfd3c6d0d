I"e<blockquote>
  <p>主体来自于Maxwell：https://maxwell-lyu.github.io/，在其基础上简单修改</p>
</blockquote>

<h1 id="数据库概论期末复习">数据库概论期末复习</h1>

<h1 id="样卷总结">样卷总结</h1>

<h2 id="大题">大题</h2>

<p>关系代数与关系演算</p>

<p>SQL语言</p>

<p>关系规范化</p>

<p>数据库设计</p>

<p>事务处理</p>

<h2 id="证明">证明：</h2>

<h3 id="冲突冲突可串行化冲突可串行化的判定定理-证明">冲突，冲突可串行化，冲突可串行化的判定定理 证明：</h3>

<p>如果调度S的事务优先图中无环，则S是冲突可串行化调度。</p>

<p>归纳法：k-1时成立，k时，考虑没有入边的事务$T_i$，则$T_i$可非冲突交换到调度最前面，$T_i$，其他k-1个事务，由归纳假设Qed</p>

<p>如果调度S的事务优先图中有环，则S不是冲突可串行化调度。</p>

<p>反证法：假设存在一个冲突可串行化调度，冲突等价于串行调度$S={T_1,T_2,…,T_n}$，根据事务优先图$T_1$先于$T_2$,$T_2$先于$T_3$，$T_{n-1}$先于$T_n$，$T_n$先于$T_1$，产生矛盾</p>

<h3 id="两阶段封锁协议与冲突可串行化的关系证明">两阶段封锁协议与冲突可串行化的关系证明：</h3>

<p>归纳法：</p>

<p>k-1时成立，考虑k时，考虑第一个有解锁动作的事务$T_i$，则$T_i$可以冲突等价于$T_i$，和其他剩下的事务，后面k-1由归纳假设，也冲突等价于一个串行化调度，Qed</p>

<h3 id="bcnf-3nf的证明">BCNF-&gt;3NF的证明</h3>

<p>$R\in BCNF$,$R\notin 3NF$有三种情况</p>

<p>$R\notin 1NF$,显然不成立</p>

<p>$R\notin 2NF$,非主属性A部分依赖关键字$K\overset{p}{\to}A，W\overset{f}{\to}A,W\subset K$,则由BCNF，$W$包含关键字$K^{‘}\subset K$矛盾</p>

<p>$R\notin 3NF$,有传递函数依赖</p>

<p><img src="C:\Users\赵超懿\AppData\Roaming\Typora\typora-user-images\image-20220108144146830.png" alt="image-20220108144146830" /></p>

<h3 id="4nf与bcnf-证明">4NF与BCNF 证明</h3>

<p>4NF：函数依赖满足BCNF</p>

<p>不是函数依赖的多值依赖：只允许出现平凡多值依赖</p>

<h1 id="第一章数据库系统概述">第一章:数据库系统概述</h1>

<h2 id="基本概念">基本概念</h2>

<ul>
  <li><strong>数据库</strong>(DB): 是数据集合, 具有统一的结构形式并存放于统一的存储介质内, 它由多种应用数据集成, 并可被应用所共享</li>
  <li><strong>数据库管理系统</strong>(DBMS): 是管理数据库的系统软件</li>
  <li><strong>数据库系统</strong>(DBS): 是一个以对海量的、具有复杂数据结构的、可以持久保存的、可供多用户共享的数据进行统一管理为目标的计算机系统</li>
  <li><strong>数据库管理员</strong>(DBA): 对数据库进行规划、设计、维护、监视的专职人员</li>
  <li>
    <p>相互之间的关系</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /></pre></td><td class="code"><pre><span class="line">数据库应用系统---+-[数据库系统]---+-[数据库] &lt;------------+---------------+</span><br /><span class="line">                 |                |                       |               |</span><br /><span class="line">                 +-应用软件       +-[数据库管理系统] : 管理               |</span><br /><span class="line">                 |                |                                       |</span><br /><span class="line">                 +-应用界面       +-[数据库管理员] : 规划, 设计, 维护, 监视</span><br /><span class="line">                 |                |</span><br /><span class="line">                 +-数据库用户     +-软件平台</span><br /><span class="line">                                  |</span><br /><span class="line">                                  +-硬件平台</span><br /></pre></td></tr></tbody></table>
  </li>
</ul>

<h2 id="数据库系统的特点">数据库系统的特点</h2>

<ul>
  <li>数据<strong>集成化</strong>: 统一的数据结构/数据模式</li>
  <li>数据<strong>独立性</strong>: 数据或数据结构(物理, 逻辑) &lt;–&gt; 应用程序</li>
  <li>数据<strong>共享性</strong>: 高</li>
  <li>数据<strong>冗余性</strong>: 低</li>
  <li>数据的<strong>安全性，完整性和一致性</strong></li>
  <li><strong>并发控制和故障恢复</strong></li>
</ul>

<h2 id="数据库内部结构体系">数据库内部结构体系</h2>

<ul>
  <li><strong>数据模式</strong>: 数据库中数据结构的具体表示与描述</li>
  <li>三级模式
    <ul>
      <li><strong>概念模式</strong>: 整个数据库中数据的全局逻辑结构 -&gt; 概念数据库</li>
      <li><strong>外模式</strong>: 某个用户所需数据的逻辑结构 -&gt; 用户数据库</li>
      <li><strong>内模式</strong>: 物理存储结构和物理存取方法 -&gt; 物理数据库</li>
    </ul>
  </li>
  <li>二级映射
    <ul>
      <li><strong>概念-&gt;内</strong>: 全局逻辑结构 -&gt; 数据的物理存储结构</li>
      <li><strong>外-&gt;概念</strong>: 多个外模式 -&gt; 一个概念模式, 而每个外模式是概念模式的一个基本视图</li>
    </ul>
  </li>
  <li>三级模式与数据独立性的关系
    <ul>
      <li>概念-&gt;内: <strong>物理独立性</strong></li>
      <li>外-&gt;概念: <strong>逻辑独立性</strong></li>
    </ul>
  </li>
</ul>

<h1 id="第二章数据模型">第二章:数据模型</h1>

<h2 id="数据模型的基本概念">数据模型的基本概念</h2>

<ul>
  <li>
    <p><strong>数据模型</strong>: 数据基本特征的抽象</p>

    <ul>
      <li>描述<strong>数据结构</strong>: 数据的类型, 内容, 性质, 数据间联系</li>
      <li>定义<strong>数据操作</strong>: 操作的类型, 方式</li>
      <li>定义<strong>数据约束</strong>: 数据间的相互关系: 语法语义联系, 制约与依存, 动态变化规则</li>
    </ul>
  </li>
  <li>数据模型的<strong>核心</strong>: 数据结构</li>
  <li>不同类型数据模型的<strong>区分依据</strong>: 应用层次</li>
  <li>三个抽象层次
    <ul>
      <li>
        <p><strong>概念数据模型</strong>: 面向客观世界, 面向用户; 客观对象的数据特征及相互关系</p>

        <blockquote>
          <p>E-R模型, EE-R模型; 面向对象模型; 谓词模型</p>
        </blockquote>
      </li>
      <li>
        <p><strong>逻辑数据模型</strong>: 面向数据库系统; 事物及关系在选定的DBMS中的实现结构</p>

        <blockquote>
          <p>层次, 网状模型; 关系, 面向对象, 谓词模型; 对象关系模型</p>
        </blockquote>
      </li>
      <li>
        <p><strong>物理数据模型</strong>: 面向计算机物理表示; 数据模型的物理表示</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="数据模型的四个世界">数据模型的四个世界</h2>

<ul>
  <li><strong>现实世界</strong>: 客观世界中的应用环境</li>
  <li><strong>概念世界</strong>: 基于现实世界, 进一步的抽象而形成</li>
  <li><strong>信息世界</strong>: 基于概念世界, 用特定的DBMS构造而成的逻辑数据模型</li>
  <li>
    <p><strong>计算机世界</strong>: 逻辑数据模型在计算机中的物理实现</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /></pre></td><td class="code"><pre><span class="line">现实世界                           用户1    ...   用户n</span><br /><span class="line">  |                                  |              |</span><br /><span class="line">概念世界------&gt;概念模型              |              |     </span><br /><span class="line">  |              |                   |              |</span><br /><span class="line">  |              |            +---&gt;外模式1   ...  外模式n     </span><br /><span class="line">信息世界------&gt;逻辑模型-------|      |              |</span><br /><span class="line">  |              |            +---&gt;概念模式---------+</span><br /><span class="line">  |              |                   | </span><br /><span class="line">计算机世界----&gt;物理模型-----------&gt;内模式</span><br /></pre></td></tr></tbody></table>
  </li>
</ul>

<h2 id="概念世界与概念模型">概念世界与概念模型</h2>

<ul>
  <li>E-R模型与E-R图（包括扩充E-R模型）
    <ul>
      <li>实体: 客观存在且又能相互区别的事物</li>
      <li>属性: 实体所具有的某种特性或特征
        <ul>
          <li>多值属性: 一个实体, 多个取值(例如爱好, 可有多个)</li>
          <li>组合属性: 一个性质, 多个属性(名字 &lt;-&gt; 姓, 名, 中间名)</li>
        </ul>
      </li>
      <li>联系: 不同实体集中, 实体间的对应关系</li>
      <li>联系上的函数对应关系: 一一, 一多/多一, 多多</li>
      <li>参与方式
        <ul>
          <li>参与方式标一个数, 参与基数标范围</li>
          <li>考虑一个实体e, 在关系R的函数对应关系中, 有x条线与他相连, 则其参与基数为x</li>
          <li>考虑实体集E, min-card(E,R): 其中实体参与基数最小值, max-card(E,R)同理</li>
        </ul>
      </li>
      <li>IS-A联系: 实体间可以有继承关系，由子集指向超集</li>
      <li>弱实体: 依赖于其他某个实体, 多个弱实体依赖一个实体, 从弱实体到依赖联系的有向箭头</li>
    </ul>
  </li>
  <li>面向对象模型
    <ul>
      <li>对象: 客观世界中能够相互区别开来的事物</li>
      <li>对象标识符: OID: 每对象有仅有一个, 用以相互区别</li>
      <li>类: 具有相同属性, 方法的对象集合</li>
      <li>方法: 施加在对象上的程序, 可审视或改变属性值</li>
      <li>超类和子类: 类的子集叫做子类, 原来的类叫做超类</li>
      <li>聚合: 若干个简单类聚合成一个复杂的类的过程</li>
      <li>分解: 复杂类分解成若干层次上的简单类的过程</li>
      <li>继承: (超类与子类)单向不循环的层次结构, 共享实现和定义</li>
      <li>合成: (聚合与分解)</li>
    </ul>
  </li>
</ul>

<h2 id="信息世界和逻辑模型">信息世界和逻辑模型</h2>

<ul>
  <li>关系模型
    <ul>
      <li>关系: 由行和列组成的二维表格(表框架 + 元组*n)</li>
      <li>属性: 表框架中的每一列</li>
      <li>值域(域): 元组在某一属性下的取值范围</li>
      <li>元组: 关系中的每一行</li>
      <li>关系模式：一个关系的关系名及其属性名的集合构成该关系 的关系模式</li>
      <li>关系数据库模式: 该关系数据库中所有关系的关系模式的集合</li>
      <li>关键字: 能唯一标识关系中的一个元组, 且又不含多余的属性值的属性集，（一个关系可以有多个关键字）关键字也被称为候选关键字
        <ul>
          <li>主关键字：可以从关系的候选关键字中选取一个作为该关系 的主关键字</li>
          <li>外关键字：设关系R中的属性集F，其取值来自于关系S中的主关键字K，则称属性集F是关系R的外关键字。（S和R可以是同一个关系）</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="计算机世界与物理模型">计算机世界与物理模型</h2>

<ul>
  <li>逻辑模型的物理存储
    <ul>
      <li>项: 文件系统中最小基本单位, 项内符号是不能继续分割</li>
      <li>记录: 由若干项组成, 有内在语义联系</li>
      <li>文件: 记录的集合</li>
    </ul>
  </li>
  <li>提高文件访问效率的常用方法
    <ul>
      <li>索引: 将文件中的记录与其物理地址(即磁盘块)间建立一张对应关系表</li>
      <li>集簇: 将具有相同或相邻项值的记录聚集在相同磁盘块内或圆柱体内以减少读盘次数</li>
      <li>HASH: 通过一个hash函数, 将要查找的记录转换成该记录所在的物理地址</li>
    </ul>
  </li>
</ul>

<h1 id="第三章关系数据库系统">第三章:关系数据库系统</h1>

<h2 id="关系数据库系统概述">关系数据库系统概述</h2>

<h2 id="关系数据库系统的衡量准则">关系数据库系统的衡量准则</h2>

<ul>
  <li>完全关系型的十二条衡量准则
    <ol>
      <li>信息准则: 逻辑一级
        <ul>
          <li>所有信息 -&gt; 表中的值, 唯一且显式地表示</li>
          <li>结构描述信息 -&gt; 组织成关系形式</li>
        </ul>
      </li>
      <li>确保访问准则
        <ul>
          <li>表名+关键字值+列名 -&gt; 访问到每一个原子数据</li>
        </ul>
      </li>
      <li>空值的关系处理准则
        <ul>
          <li>空值: 无意义/当前未知</li>
          <li>系统应当可以处理有空值参与的: 比较运算, 表达式运算, 统计运算</li>
        </ul>
      </li>
      <li>基于资源管理的动态联机目录
        <ul>
          <li>数据库的描述信息(数据字典) 与 用户数据 有 相同的表示形式和操作方式</li>
          <li>被授权用户可对 数据库的描述信息 进行 查询与扩充</li>
        </ul>
      </li>
      <li>统一易用的数据子语言: 至少一种子语言支持以下功能
        <ul>
          <li>数据定义</li>
          <li>视图(view)定义</li>
          <li>数据操纵</li>
          <li>完整性约束能力</li>
          <li>授权机制</li>
          <li>事务处理能力</li>
        </ul>
      </li>
      <li>视图更新准则: 视图除查询外, 还可增加, 删除, 修改数据</li>
      <li>高级的插入、删除及修改操作: 一条命令可以插入、删除及修改操作多条元组</li>
      <li>物理数据独立性</li>
      <li>逻辑数据独立性</li>
      <li>数据完整性准则: 提供三类数据完整性约束的定义功能</li>
      <li>分布独立性: 数据分布的改变不影响原有的应用程序</li>
      <li>无损害原则: 对提供低级数据子语言的要求</li>
    </ol>
  </li>
  <li>空值（NULL）的定义: 无意义/当前未知的值</li>
</ul>

<h2 id="关系模型数学理论关系代数">关系模型数学理论—关系代数</h2>

<h3 id="关系模型概念">关系模型（概念）</h3>

<ul>
  <li>关系数据结构
    <ul>
      <li>表结构（表头）:
        <ul>
          <li>表框架: 属性组成表框架</li>
          <li>表的元数: n个属性&lt;-&gt;表的元数</li>
          <li>表的基数: m个元组&lt;-&gt;表的基数</li>
        </ul>
      </li>
      <li>关系：关系的性质
        <ul>
          <li>元组: 个数有限, 唯一, 次序无关, 分量原子性, 分量值域同一</li>
          <li>属性: 名称唯一, 次序无关</li>
        </ul>
      </li>
      <li>关键字：候选关键字，主关键字，外关键字
        <ul>
          <li>关键字: 唯一最小标识元组的属性集, 每张表至少一个</li>
          <li>主关键字: 被选中的关键字</li>
          <li>superkey: 可以唯一确定一个元组的属性的集合</li>
          <li>候选关键字: 一个关系中可以有多个关键字，都是候选关键字</li>
          <li>外关键字: 如果表A中的属性集F是表B的关键字, 则称该属性集F为表A的外关键字</li>
        </ul>
      </li>
      <li>关系数据库：关系子模式-视图（view）</li>
    </ul>
  </li>
  <li>关系操纵
    <ul>
      <li>数据查询：步骤
        <ul>
          <li>两个关系的合并: 有多张表, 先合并为单个关系</li>
          <li>单个关系内的元组选择: 选择符合条件的元组(行指定)</li>
          <li>单个关系内的属性指定: 执行属性(列指定)</li>
        </ul>
      </li>
      <li>元组: 单个关系内的操作
        <ul>
          <li>删除: 确定被删除的元组-&gt;执行删除</li>
          <li>插入: 添加元组</li>
          <li>修改: 删旧-&gt;插新</li>
        </ul>
      </li>
      <li>空值的处理
        <ul>
          <li>主键不允许空值</li>
          <li>算数表达式: 含空值, 结果为空值</li>
          <li>逻辑表达式: 含空值, 结果为false</li>
          <li>统计计算: 空值不计入(视而不见)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>关系中的数据约束
    <ul>
      <li>实体完整性约束: 主关键字属性不为空值</li>
      <li>参照完整性约束: 外键要么取空值, 要么是被引用表中的主键值</li>
      <li>用户定义的完整性: 用户自己定义的属性取值约束</li>
    </ul>
  </li>
</ul>

<h3 id="关系的表示">关系的表示</h3>

<ul>
  <li>
    <p>关系的表示
设属性域为$D_1,D_2,⋯,D_n$
关系$R\subseteq D_1\times D_2\times \cdots \times D_n$</p>
  </li>
  <li>
    <p>迪卡尔乘积
$D_1,D_2,\cdots,D_n$是$n$个集合</p>

    <p>$D_1\times D_2\times\cdots\times D_n={(d_1,d_2,\cdots,d_n):d_i\in D_i,i\in (1,2,\cdots,n)}$</p>

    <table>
      <tbody>
        <tr>
          <td>$</td>
          <td>D_1\times D_2\times \cdots\times D_n</td>
          <td>=\prod\limits_{i=1}^{n}</td>
          <td>D_i</td>
          <td>$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>关系代数中的五种基本运算：选择，投影，笛卡儿积，并，差（请注意每个运算符的执行条件和结果关系的关系模式）
    <ul>
      <li>投影运算: $\pi_A(R)$
        <ul>
          <li>略去某些列, 重排剩余列的次序
关系R有属性${A_1,A_2, \cdots, A_n}$, 在其中$m$个属性上的投影运算如下
$\pi_{B_1, B_2, \cdots, B_n}(R), B_i\in{A_1,A_2, \cdots, A_n}$</li>
          <li>注意消除可能出现的重复元组</li>
        </ul>
      </li>
      <li>选择运算: $\sigma_F(R)$
        <ul>
          <li>关系模式不变, 由属于$R$且满足条件$F$的元组构成</li>
        </ul>
      </li>
      <li>笛卡尔乘积 - 关系的合并: 交换律, 结合律
        <ul>
          <li>若有相同的属性名, 必须在结果关系中对其中一个换名
注意：交运算: 同类关系</li>
          <li>用$R\cap S = R-(R-S)$代替, 不是基本运算</li>
        </ul>
      </li>
      <li>并运算: $R\cup S$同类关系
        <ul>
          <li>关系模式不变, 属于$R$或者$S$</li>
        </ul>
      </li>
      <li>差运算: $R-S$同类关系
        <ul>
          <li>关系模式不变, 属于$R$且不属于$S$</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>基本运算的应用
    <ul>
      <li>插入: $R^*=R\cup R_{new}$</li>
      <li>删除: $R^* = R-R_{old}$</li>
      <li>修改: $R^* = (R-R_{old})\cup R_{new}$</li>
      <li>查询: $\pi_A(\sigma_B(R))$简写为$\pi_A\sigma_B(R)$: 不能交换位置</li>
    </ul>
  </li>
</ul>

<h3 id="关系模型与关系代数">关系模型与关系代数</h3>

<ul>
  <li>关系: n元有序组的集合</li>
  <li>关系操纵: 关系上的集合运算</li>
  <li>关系代数: 关系集合AAA及5种基运算构成的代数</li>
  <li>关系模型
    <ul>
      <li>关系模型的数据结构</li>
      <li>关系模型上的数据操纵</li>
      <li>关系模型上的数据约束</li>
    </ul>
  </li>
</ul>

<h3 id="关系代数中的扩充运算">关系代数中的扩充运算</h3>

<ul>
  <li>交运算: 同类关系
    <ul>
      <li>$R\cap S = R-(R-S)$</li>
      <li>关系模式不变, 既属于R也属于S的元组组成的集合</li>
    </ul>
  </li>
  <li>除运算:$\textrm{Head}(S)\subset \textrm{Head}(R)$
    <ul>
      <li>关系模式:$\textrm{Head}(T)=\textrm{Head}(R) - textrm{Head}(S)$</li>
      <li>设$x\in T$, 则$\forall y\in S$, $(x,y)\in R$, 所有满足条件的$x$构成结果</li>
      <li>如果$R=Ttimes S$, 则$T=R\div S, S=R\div T$; 如果T=R\div S, 则$T\times S\subseteq R$</li>
    </ul>
  </li>
  <li>联接运算
    <ul>
      <li>根据联接条件合并: $R\mathop\bowtie\limits_F S=\sigma_F(R\times S)$</li>
      <li>自然联接: $R\bowtie S$所有同名属性上的取值都一样, 就联接元组, 同名属性保留一份</li>
      <li>外联接: 有”外”的一侧, 其所有元组均出现, 另一侧无匹配元组就用null代替</li>
    </ul>
  </li>
  <li>扩充运算与基本运算之间的关系
    <ul>
      <li>交: 可由差运算实现: $R\cap S=R-(R-S)=S-(S-R)$</li>
      <li>除:
        <ul>
          <li>$\textrm{Head}(R) = {A_1, \cdots, A_n, B_1, \cdots, B_m}$</li>
          <li>${Head}(S) = {B_1, \cdots, B_m}$</li>
          <li>$R\div S=\pi_{A_1,\cdots A_n}(R)-\pi_{A_1,\cdots A_n}((\pi_{A_1,\cdots A_n}(R)\times S)-R)$</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>扩充运算的应用实例</li>
</ul>

<h3 id="关系代数的应用">关系代数的应用</h3>

<blockquote>
  <p>写在后面的大题部分</p>

  <ul>
    <li>综合的关系代数应用表示，复杂查询的关系代数表达式</li>
    <li>关系代数的应用
      <ul>
        <li>单个关系上的选择与投影</li>
        <li>两个关系的并、交、差</li>
        <li>两个关系的迪卡尔乘积、自然联接、θ-联接</li>
        <li>两个关系的除法</li>
      </ul>
    </li>
    <li>难点
      <ul>
        <li>查询条件带有‘否定’语义：‘不等’比较 &amp; 减法运算</li>
        <li>使用表联接查询，还是使用除法?</li>
        <li>正确使用自然连接运算 和 除法运算</li>
        <li>表的自联接</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="关系演算">关系演算</h3>

<ul>
  <li>原子公式
    <ul>
      <li>谓词是原子公式</li>
      <li>$u(i) \theta v(j)$是原子公式, 其中$u(i), v(j)$是元组中属性的值, $\theta$是比较运算符</li>
      <li>$u(i) \theta a$是原子公式, 其中$a$是常量</li>
    </ul>
  </li>
  <li>公式的定义: 以下三种方式, 有限次数组合构成
    <ul>
      <li>原子公式是公式</li>
      <li>公式的与, 或, 蕴含, 非 均为公式</li>
      <li>量词约束一个公式, 构成新公式</li>
    </ul>
  </li>
  <li>基于关系演算的数据查询表示
    <ul>
      <li>投影
$\pi_{A_{1},A_{2},\cdots,A_{k}}(R)=\exists x_{k+1},x_{k+2},\cdots ,x_n(R(x_1,x_2,\cdots,x_n))$</li>
      <li>选择
$\sigma_F(R)=R(x_1,x_2,\cdots,x_n)\wedge F$
        <ul>
          <li>相等比较可以直接用常量代替: $\sigma_{x_1=’a’}(R)=R(‘a’,x_2,\cdots,x_n)\wedge F$</li>
        </ul>
      </li>
      <li>笛卡尔积
$R\times S = R(p)\wedge S(q)$</li>
      <li>$\theta$-联接
$R\underset{F}{\bowtie} S = R(p)\wedge S(q)\wedge F$</li>
      <li>自然联接
$R\bowtie S = R(x,y,z)\wedge S(t,u,v)$</li>
      <li>自联接, 重命名
$R(x, g_1)\wedge R(x, g_2)$</li>
      <li>除法
$R\div S=\forall y(S(y)\rightarrow R(x,y))$</li>
      <li>删除
$R-S = R(u)\wedge \neg S(u)$</li>
      <li>插入
$R\cup S = R(t)\vee S(t)$</li>
      <li>修改 = 删除再插入</li>
    </ul>
  </li>
  <li>公式的表示
    <ul>
      <li>$\phi_1\wedge\phi_2$
        <ul>
          <li>有公共变元, 等价于自然联接$R_1\bowtie R_2$</li>
          <li>无公共变元, 等价于笛卡尔乘积$R_1\times R_2$</li>
        </ul>
      </li>
      <li>$\phi_1\vee\phi_2: R_1\cup R_2$</li>
      <li>$\phi_1\rightarrow\phi_2$: $R_2\div R_1$</li>
      <li>$\neg\phi: (\prod^nD_i)-R, D_i$为第$i$个自由变元的值域</li>
      <li>$\exists r(\phi)$: $\pi_{A_1,A_2,\cdots,A_k}(R)$</li>
      <li>$\forall r(\phi):R\div S$</li>
    </ul>
  </li>
</ul>

<h2 id="关系数据库语言sql92">关系数据库语言SQL’92</h2>

<h3 id="sql概貌">SQL概貌</h3>

<ul>
  <li>SQL的基本概念: 结构化查询语言
    <ul>
      <li>使用方式
        <ul>
          <li>自含式: 独立的交互式命令行语言</li>
          <li>嵌入式: 嵌入到某种高级语言当中</li>
        </ul>
      </li>
      <li>基表: 关系</li>
      <li>虚表(视图): 关系子模式</li>
      <li>行: 元组</li>
      <li>列: 属性</li>
    </ul>
  </li>
</ul>

<h3 id="sql数据定义功能">SQL数据定义功能</h3>

<blockquote>
  <p>啥也没有?怎么回事啊, 算了写一点乱七八糟的吧</p>

  <ul>
    <li>
      <p>创建基表</p>

      <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tabname {</span><br /><span class="line">  colname datatype <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br /><span class="line">  colname2 datatype2</span><br /><span class="line">}</span><br /></pre></td></tr></tbody></table>
    </li>
  </ul>

</blockquote>

<ul>
  <li>
    <p>修改基表</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabname <span class="keyword">ADD</span> colname datatype</span><br /><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabname <span class="keyword">DROP</span> colname</span><br /></pre></td></tr></tbody></table>
  </li>
  <li>
    <p>删除基表</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tabname</span><br /></pre></td></tr></tbody></table>
  </li>
</ul>

<h3 id="sql数据操纵功能">SQL数据操纵功能</h3>

<ul>
  <li>SQL语言与关系代数的关系</li>
  <li>映像语句（select statement）的结构
    <ul>
      <li>
        <p>目标子句: <code class="language-plaintext highlighter-rouge">SELECT * | colname { , colname ... }</code></p>

        <blockquote>
          <p>最后执行, 有排序时倒数第二执行</p>
        </blockquote>
      </li>
      <li>
        <p>范围子句: <code class="language-plaintext highlighter-rouge">FROM tabname { , tabname ... }</code></p>

        <blockquote>
          <p>在SQL中, 这些表相当于被笛卡尔乘积连接, 因此联结时需要在where中给出条件</p>
        </blockquote>
      </li>
      <li>条件子句: <code class="language-plaintext highlighter-rouge">[ WHERE search_condition ]</code></li>
      <li>分组子句: <code class="language-plaintext highlighter-rouge">[ GROUP BY colname { , colname ... }</code></li>
      <li>分组查询子句: <code class="language-plaintext highlighter-rouge">[ HAVING group_condition ]</code></li>
      <li>
        <p>排序输出子句: <code class="language-plaintext highlighter-rouge">[ ORDER BY colname [ ASC | DESC ] { , colname [ ASC | DESC ] ... } ]</code></p>

        <blockquote>
          <p>最后执行</p>

          <ul>
            <li>两个必须的子句: <code class="language-plaintext highlighter-rouge">select</code>/<code class="language-plaintext highlighter-rouge">from</code></li>
            <li>having子句的前面必须有group by子句</li>
          </ul>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>基本查询功能
    <ul>
      <li>distinct谓词: <code class="language-plaintext highlighter-rouge">DISTINCT colname</code> 统计查询使用, 去重统计</li>
      <li>LIKE: <code class="language-plaintext highlighter-rouge">colname [NOT] LIKE val1 [ESCAPE val2]</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">val1</code>是模板, 其中<code class="language-plaintext highlighter-rouge">_</code>匹配任意一个字符, <code class="language-plaintext highlighter-rouge">%</code>匹配任意一个字符串</li>
          <li><code class="language-plaintext highlighter-rouge">val2</code>定义转义指示字符, 跟在其后的, <code class="language-plaintext highlighter-rouge">val1</code>中的通配符和转义字符将表示原义</li>
        </ul>
      </li>
      <li>IS NULL谓词: <code class="language-plaintext highlighter-rouge">colname IS [NOT] NULL</code>判断是否为NULL</li>
      <li>多表联接查询: <code class="language-plaintext highlighter-rouge">WHERE</code>当中, 通过属性的相等, 实现表与表之间的连接</li>
      <li>表的自联接查询: <code class="language-plaintext highlighter-rouge">tabname [[AS] alias]</code> 给表起别名</li>
    </ul>
  </li>
  <li>嵌套查询
    <ul>
      <li>IN: <code class="language-plaintext highlighter-rouge">expr [NOT] IN (subquery)</code>标量与集合量之间的属于比较</li>
      <li>SOME/ANY/ALL: <code class="language-plaintext highlighter-rouge">expr θ SOME|ANY|ALL (subquery)</code>标量与集合中元素之间的量化比较</li>
      <li>EXISTS: <code class="language-plaintext highlighter-rouge">[NOT] EXIST</code>是否为空集的判断谓词</li>
      <li>相关子查询与独立子查询: 子查询内部引用了外部查询的表或元组变量, 因此每当外部取值变化, 都要再运行子查询</li>
    </ul>
  </li>
  <li>子查询的合并: 带<code class="language-plaintext highlighter-rouge">ALL</code>意为允许重复
    <ul>
      <li>UNION: <code class="language-plaintext highlighter-rouge">(subquery) UNION [ALL] (subquery)</code>并</li>
      <li>INTERSECT: <code class="language-plaintext highlighter-rouge">(subquery) INTERSECT [ALL] (subquery)</code>交</li>
      <li>EXCEPT: <code class="language-plaintext highlighter-rouge">(subquery) EXCEPT [ALL] (subquery)</code>减</li>
    </ul>
  </li>
  <li>
    <p>复杂数据查询</p>

    <ul>
      <li>统计查询
        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">COUNT(colname)</code>: 计数, 空值忽略</p>

            <blockquote>
              <p><code class="language-plaintext highlighter-rouge">COUNT(DISTINCT colname)</code>: 计数互不相同的值, 空值忽略</p>
            </blockquote>
          </li>
          <li><code class="language-plaintext highlighter-rouge">SUM(colname)</code>: 求和, 空值忽略</li>
          <li><code class="language-plaintext highlighter-rouge">AVG(colname)</code>: 求平均, 空值忽略</li>
          <li><code class="language-plaintext highlighter-rouge">MIN(colname)</code>: 求最小, 空值忽略</li>
          <li><code class="language-plaintext highlighter-rouge">MAX(colname)</code>: 求最大, 空值忽略</li>
        </ul>
      </li>
      <li>
        <p>分组统计查询: <code class="language-plaintext highlighter-rouge">GROUP BY colname {, colname}</code>按照<code class="language-plaintext highlighter-rouge">colname</code>的取值不同, 分组统计</p>

        <blockquote>
          <p><code class="language-plaintext highlighter-rouge">SELECT</code>当中必须包括<code class="language-plaintext highlighter-rouge">GROUP BY</code>当中的属性</p>
        </blockquote>
      </li>
      <li>分组选择统计查询: <code class="language-plaintext highlighter-rouge">HAVING group_cond</code>必须先分组, 之后满足<code class="language-plaintext highlighter-rouge">group_confd</code>的组才会被保留</li>
      <li>
        <p>关系代数中的除法运算功能在SQL中的表示方法
待构造的除法: $\pi_{sno, cno}(SC)\div \pi_{cno}(C)$</p>

        <blockquote>
          <p>语义: 对于符合要求的SC中sno, (对于任意的C中cno, 都有sno选修过cno的记录)
等价于: 对于符合要求的SC中元组S, 对于任意C中元组x, 都能找到元组y,使得y.sno=S.sno and y.cno=x.cno</p>

          <p>任意-&gt;不存在不满足-&gt;不存在(不存在):</p>

          <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /></pre></td><td class="code"><pre><span class="line">对SC中S, 不存在  </span><br /><span class="line">  对C中x, 不存在</span><br /><span class="line">    SC中的S-x元组y, 即y.sno=S.sno and y.cno=x.cno</span><br /></pre></td></tr></tbody></table>
        </blockquote>

        <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /><span class="line">10</span><br /><span class="line">11</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> SC.sno                        <span class="comment"># </span></span><br /><span class="line"><span class="keyword">FROM</span> SC S                                     <span class="comment"># 被除数当中的元组, 作为目标元组, 将目标属性传入(S.sno)</span></span><br /><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (                            <span class="comment"># 不存在不满足条件的元组</span></span><br /><span class="line">    <span class="keyword">SELECT</span> *                                  <span class="comment"># </span></span><br /><span class="line">    <span class="keyword">FROM</span> C x                                  <span class="comment"># 除数当中的元组, 被要求对任意S.sno全都有</span></span><br /><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (                        <span class="comment"># 为了表示"不满足", 构造对S.sno不含有, 即不存在满足的元组</span></span><br /><span class="line">        <span class="keyword">SELECT</span> *                              <span class="comment"># </span></span><br /><span class="line">        <span class="keyword">FROM</span> SC y                             <span class="comment"># 被除数元组的任意元组, 寻找满足的元组</span></span><br /><span class="line">        <span class="keyword">WHERE</span> y.sno = S.sno <span class="keyword">AND</span> y.cno = x.cno <span class="comment"># 一个[除数,被除数]的元组, 两组相等关系, 分别约束: (对被除数进行查询), (对除数进行查询)</span></span><br /><span class="line">    )                                         <span class="comment"># 这个子查询可以由NOT IN代替, 表示不含有</span></span><br /><span class="line">)                                             <span class="comment">#</span></span><br /></pre></td></tr></tbody></table>
      </li>
      <li>在FROM子句中嵌入子查询: <code class="language-plaintext highlighter-rouge">FROM (subquery) [[AS] alias]</code>
&lt;!– + 查询结果输出</li>
      <li>结果元组去重：distinct</li>
      <li>结果元组排序：order by –&gt;</li>
    </ul>
  </li>
</ul>

<h3 id="sql的更新功能">SQL的更新功能</h3>

<ul>
  <li>元组删除: <code class="language-plaintext highlighter-rouge">DELETE FROM tabname [WHERE cond]</code></li>
  <li>
    <p>元组插入:</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tabname [(colname {,colname})]</span><br /><span class="line"><span class="keyword">VALUES</span> (expr | <span class="literal">NULL</span> {,expr | <span class="literal">NULL</span>}) | (subquery)</span><br /></pre></td></tr></tbody></table>
  </li>
  <li>
    <p>元组修改:</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tabname </span><br /><span class="line"><span class="keyword">SET</span> colname=expr | <span class="literal">NULL</span> | subquery, ...</span><br /><span class="line">[<span class="keyword">WHERE</span> cond]</span><br /></pre></td></tr></tbody></table>
  </li>
</ul>

<h3 id="视图">视图</h3>

<ul>
  <li>视图概念: 若干张表经映像语句构筑而成的表(导出表)</li>
  <li>视图与基表的区别: 同样有构造信息, 但视图不存储(虚表)</li>
  <li>
    <p>创建: <code class="language-plaintext highlighter-rouge">CREATE VIEW &lt;视图名&gt; [(&lt;列名&gt;{, &lt;列名&gt;})] AS &lt;映像语句&gt; [WITH CHECK OPTION]</code></p>

    <blockquote>
      <p>映像语句实际上就是子查询, CHECK OPTICON 不知道什么意思</p>
    </blockquote>
  </li>
  <li>删除: <code class="language-plaintext highlighter-rouge">DROP VIEW &lt;视图名&gt;</code></li>
  <li>视图的嵌套定义</li>
  <li>视图删除中的连锁反应: 视图的删除操作时，将连带删除定义在该视图上的其它视图</li>
  <li>可更新视图的判断准则: 视图每一行对应基表每一行, 视图每一列对应基表每一列</li>
  <li>视图的作用: 提高数据独立性, 简化用户观点, 自动的安全保护</li>
</ul>

<h1 id="第四章数据库的安全性与完整性保护">第四章:数据库的安全性与完整性保护</h1>

<h2 id="数据库的安全性保护">数据库的安全性保护</h2>

<ul>
  <li>数据库安全的基本概念: 防止非法使用数据库(规定的途径和规则)
    <ul>
      <li>主体: 数据访问者</li>
      <li>客体: 数据及其载体</li>
      <li>身份标识与鉴别: 主体具有标识符和口令</li>
      <li>
        <p>自主访问控制: 基于存取矩阵的安全控制模型(用户给定权限, 访问时检查权限)</p>

        <blockquote>
          <p>客体所有者(创建者)自动拥有全部权限, 有权限的可授予他人权限, 权限仅限这两种方法获得
登陆时检查: 是不是管理员-&gt;是不是所有者-&gt;有没有被授权
存储矩阵: 行标签: 客体; 列标签: 主体</p>
        </blockquote>
      </li>
      <li>
        <p>审计: 跟踪记录用户对数据的访问操作</p>

        <blockquote>
          <p>时间, 内容, 用户名, 终端名, 操作类型, 操作结果; 给出报警信息</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>SQL对数据库安全的支持
    <ul>
      <li>
        <p>SQL中的存取权限</p>

        <blockquote>
          <p>权限: SELECT INSERT DELETE UPDATE REFERENCE EXECUTE USAGE
对象: 表/视图 属性 域(数据类型) 存储过程/函数/触发器</p>
        </blockquote>
      </li>
      <li>授权命令: <code class="language-plaintext highlighter-rouge">GRANT &lt;权限列表&gt; ON &lt;对象&gt; TO &lt;用户名列表&gt; [WITH GRANT OPTION]</code></li>
      <li>
        <p>回收命令: <code class="language-plaintext highlighter-rouge">REVOKE &lt;权限列表&gt; ON &lt;对象&gt; FROM &lt;用户名列表&gt; [RESTRICT | CASCADE]</code></p>

        <blockquote>
          <p>CASCADE连锁回收; RESTRICT不连锁才回收, 否则拒绝回收</p>
        </blockquote>
      </li>
    </ul>
  </li>
</ul>

<h2 id="数据库的完整性保护">数据库的完整性保护</h2>

<ul>
  <li>数据库完整性保护: 对数据库中数据的正确性和一致性的维护</li>
  <li>功能: 设置功能; 检查功能; 处理功能</li>
  <li>目的: 及时发现错误-&gt;防止错误的蔓延-&gt;恢复到正确状态</li>
  <li>常用实现措施
    <ul>
      <li>完整性约束条件的定义及检查</li>
      <li>触发器</li>
      <li>并发控制技术</li>
    </ul>
  </li>
  <li>实体完整性: 关键字不为空</li>
  <li>参照完整性: 不能引用不存在的实体(外关键字要么与被引相同, 要么为空值)</li>
  <li>用户定义完整性: 用户自己定义</li>
  <li>完整的CREATE TABLE命令
    <ul>
      <li>基表的创建</li>
      <li>
        <p>完整性约束的定义：主关键字，外关键字，CHECK约束，UNIQUE，NOT NULL, DEFAULT</p>

        <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /><span class="line">10</span><br /></pre></td><td class="code"><pre><span class="line">{  NOT NULL   |</span><br /><span class="line">  [ CONSTRAINT constraint_name ] </span><br /><span class="line"><span class="comment"># 给约束起名</span></span><br /><span class="line">    UNIQUE</span><br /><span class="line">    | PRIMARY KEY</span><br /><span class="line">    | <span class="keyword">CHECK</span> ( search_condition )</span><br /><span class="line">    | <span class="keyword">REFERENCES</span> table_name [ ( column_name ) ]</span><br /><span class="line">    [ <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> | RESTRICT | <span class="keyword">SET</span> <span class="literal">NULL</span> ]</span><br /><span class="line">    [ <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> | RESTRICT | <span class="keyword">SET</span> <span class="literal">NULL</span> ] </span><br /><span class="line">}</span><br /></pre></td></tr></tbody></table>
      </li>
    </ul>
  </li>
</ul>

<table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /></pre></td><td class="code"><pre><span class="line">FOREIGN KEY ( colname { , colname ... } ) </span><br /><span class="line"><span class="comment"># 定义主外键的引用关系</span></span><br /><span class="line">  REFERENCES table_name [ ( colname { ,colname... } ) ] </span><br /><span class="line">    </span><br /><span class="line"><span class="comment"># 当在被引用表中删除元组或修改主键值时，需要维护引用表中外键值的正确性</span></span><br /><span class="line">    [ ON <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> | RESTRICT | <span class="keyword">SET</span> <span class="literal">NULL</span> ]</span><br /><span class="line">    [ <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> | RESTRICT | <span class="keyword">SET</span> <span class="literal">NULL</span> ]   }</span><br /><span class="line">    </span><br /><span class="line"><span class="comment"># CASCADE 同步改变 | RESTRICT 拒绝(默认模式) | SET NULL 外键设为空</span></span><br /></pre></td></tr></tbody></table>

<ul>
  <li>触发器: 在数据库系统中，一个事件的发生会导致另外一些事件的发生，这样的功能被称为触发器</li>
  <li>
    <p>创建命令</p>

    <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /><span class="line">10</span><br /><span class="line">11</span><br /><span class="line">12</span><br /><span class="line">13</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name { <span class="keyword">BEFORE</span> | <span class="keyword">AFTER</span> } </span><br /><span class="line"><span class="comment"># 定义时机</span></span><br /><span class="line">{ <span class="keyword">INSERT</span> | <span class="keyword">DELETE</span>                              </span><br /><span class="line"><span class="comment"># 触发事件</span></span><br /><span class="line">  | <span class="keyword">UPDATE</span> [ <span class="keyword">OF</span> colname { , colname ... } ] }</span><br /><span class="line">    <span class="keyword">ON</span> table_name </span><br /><span class="line">  [ <span class="keyword">REFERENCING</span> corr_name_def { , ...... } ]</span><br /><span class="line">  [ <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> | <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">STATEMENT</span> ]        </span><br /><span class="line"><span class="comment"># 执行方式</span></span><br /><span class="line">  [ <span class="keyword">WHEN</span> ( search_condition ) ]</span><br /><span class="line">  { <span class="keyword">statement</span>                                  </span><br /><span class="line"><span class="comment"># 结果事件</span></span><br /><span class="line">  | BEGIN ATOMIC statement; { statement; ... } END</span><br /></pre></td></tr></tbody></table>
  </li>
</ul>

<h1 id="第五章事务处理并发控制与故障恢复技术">第五章:事务处理并发控制与故障恢复技术</h1>

<h2 id="事务处理概念">事务处理（概念）</h2>

<ul>
  <li>
    <p>事务的定义: 某个用户所执行的一个不能被打断的对数据库的操作序列</p>
  </li>
  <li>ACID性质
    <ul>
      <li>A原子性: 不可分割的操作序列, 要么全部, 要么不执行</li>
      <li>C一致性: 执行前后都满足一致性</li>
      <li>I隔离性: 并发结果与某种串行执行结果相同, 即相互独立</li>
      <li>D持久性: 事务完成，它对数据库的所有更新应永久地反映在数据库中</li>
    </ul>
  </li>
  <li>
    <p>事务活动图
<img src="https://maxwell-lyu.github.io/2019/12/19/Learn-DB-20191219-DB-FIN/01.png" alt="image" /></p>
  </li>
  <li>
    <p>状态转换图</p>

    <p><img src="https://maxwell-lyu.github.io/2019/12/19/Learn-DB-20191219-DB-FIN/02.png" alt="image" /></p>
  </li>
  <li>事务控制语句
    <ul>
      <li>commit transaction</li>
      <li>rollback transaction: 可以恢复到存在的保存点, 或者回到事务起点</li>
      <li>savepoint: 设置保存点</li>
    </ul>
  </li>
  <li>相关的参数设置语句
    <ul>
      <li>自动提交: <code class="language-plaintext highlighter-rouge">SET AUTOCOMMIT ON|OFF</code></li>
      <li>读写: <code class="language-plaintext highlighter-rouge">SET TRANSACTION READONLY|READWRITE</code></li>
      <li>
        <p>隔离级别: <code class="language-plaintext highlighter-rouge">SET TRANSACTION ISOLATION LEVEL READUNCOMMITTED|READCOMMITTED| READREPEATABLE|SERIALIZABLE</code></p>

        <blockquote>
          <p>READUNCOMMITTED无封锁; READCOMMITTED读加共享锁到读完; READREPEATABLE读加共享锁到事务结束; SERIALIZABLE串行化调度执行</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>事务的语句组成成分: 开始, 结束(正常结束-&gt;提交事务, 非正常结束-&gt;回滚)</li>
</ul>

<h2 id="并发控制技术概念">并发控制技术（概念）</h2>

<ul>
  <li>事务
    <ul>
      <li>事务的并发性: 数据库是一个多用户共享系统, 以事务为单位访问</li>
      <li>并发控制: 实现多个用户事务的并发执行的技术</li>
      <li>调度: DBMS中事务执行的操作序列, 按时间排序</li>
      <li>串行调度: 做完一个接下一个事务(首先是一个事务的所有操作，然后是另一个事务的所有操作, 原句真啰嗦)</li>
      <li>可串行化调度: 一个调度对数据库状态的影响和某个串行调度相同</li>
      <li>冲突: 调度中一对相邻操作, 交换顺序，涉及的事务中至少有一个的行为会改变</li>
      <li>
        <p>冲突可串行化(可串行化的充分条件): 冲突可串行化调度”冲突等价”于一个串行调度</p>

        <blockquote>
          <p>冲突等价: 如果通过一系列相邻操作的非冲突交换能够将一个调度转换为另一个调度，则我们称这两个调度是冲突等价的</p>
        </blockquote>
      </li>
      <li>
        <p>视图可串行化: 视图可串行化调度”视图等价”于一个串行调度</p>

        <blockquote>
          <p>视图等价
[视图等价]相同的一组事务，两个不同的调度S与H。S和H被称为“视图等价”当且仅当满足下列三个条件：
对每一个数据项D
如果在调度S中事务$T_k$读到D的初始值，则在调度H中事务$T_k$也必须读到D的初始值；
如果在调度S中事务$T_k$执行了rk(D)，并且读到的是由事务$T_j$写入的D的值，则在调度H中事务$T_k$的rk(D)读到的也必须是由事务$T_j$ 所写入的D的值；
如果在调度S中是由事务$T_k$来执行最后一条关于D的写操作wk(D)，则在调度H中也一定是事务$T_k$执行最后一条关于D的写操作wk(D)。</p>
        </blockquote>
      </li>
      <li>
        <p>冲突可串行化的判定方法: 事务优先图没环 &lt;-&gt; 是冲突可串行化</p>

        <blockquote>
          <p>事务优先图
优先: 给出的调度H中, 两个动作来自不同事务, 若其涉及同一个数据库对象且至少一个为写, 则这两个事务不可交换, 定义了优先关系
优先关系画出有向图
盲写: 没读就写</p>
        </blockquote>
      </li>
      <li>不正确的事务并发所导致的数据不一致现象</li>
    </ul>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>不一致现象</th>
      <th>描述</th>
      <th>原因</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>丢失修改</td>
      <td>一个修改破坏另一个修改结果</td>
      <td>多个事务并发修改同一个数据</td>
    </tr>
    <tr>
      <td>脏读</td>
      <td>读到错误的数据</td>
      <td>其他事务未提交的修改</td>
    </tr>
    <tr>
      <td>不可重复读</td>
      <td>前后两次读不一致</td>
      <td>其他事务已提交的写操作</td>
    </tr>
    <tr>
      <td>幻像读</td>
      <td>一个事务中, 执行相同的查询多次, 结果不同</td>
      <td>其他事务已提交的插入操作</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>封锁
    <ul>
      <li>
        <p>排它锁（X锁）: 一个对象同时只能上一次, 维持到事务结束</p>

        <blockquote>
          <p>自己可以读写, 别人啥也不行</p>
        </blockquote>
      </li>
      <li>
        <p>共享锁（S锁）: 可以与其他S锁并存</p>

        <blockquote>
          <p>全员只读</p>
        </blockquote>
      </li>
      <li>锁申请: 能锁就锁, 锁了就睡, 被叫醒且能锁就锁</li>
      <li>锁释放: 解锁, 唤醒</li>
      <li>基于封锁技术的并发控制实现方法
        <ul>
          <li>过程: 访问发给调度器-&gt;调度器申请锁, 封锁管理器-&gt;管理器返回结果-&gt;(成功, 操作发给执行引擎; 失败, 进队列)</li>
          <li>三级封锁协议
            <ul>
              <li>一级: 写之前加X锁, 事务结束释放</li>
              <li>二级: 一级 + 读前加S锁, 读完释放</li>
              <li>三级: 二级 + 读前加S锁, 事务结束释放</li>
            </ul>
          </li>
          <li>三级封锁协议防止的不一致
            <ul>
              <li>一级: 丢失修改</li>
              <li>二级: 丢失修改, 脏读</li>
              <li>三级: 丢失修改, 脏读, 不可重复读</li>
            </ul>
          </li>
          <li>两阶段封锁协议
            <ul>
              <li>在一个事务T中，如果它的所有封锁请求都先于它的所有解锁请求，则该事务被称为‘两阶段封锁事务’ ，简称‘2PL事务’</li>
              <li>一阶段: 申请整个过程需要的锁</li>
              <li>二阶段: 释放所有锁, 不能再申请</li>
            </ul>
          </li>
          <li>两阶段封锁协议与冲突可串行化的关系: 两阶段任意合法调度S都是冲突可串行化的</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>多粒度封锁
    <ul>
      <li>封锁粒度/并发度/并发控制实现开销 之间的关系
        <ul>
          <li>锁粒度大, 并发度低, 控制开销小</li>
          <li>锁粒度小, 并发度高, 控制开销大</li>
        </ul>
      </li>
      <li>多粒度封锁: 同时支持多种封锁粒度供事务选择</li>
      <li>多粒度树: 按照封锁粒度的大小构造出一棵 ‘多粒度树’，以树中的每个结点作为封锁对象，可以构成一个‘多粒度封锁协议’</li>
      <li>基于意向锁的多粒度封锁协议
        <ul>
          <li>意向锁: 节点加意向锁, 其下层节点正被加锁(必须上层先加意向锁, 才能给下层加锁)
            <ul>
              <li>IS: 下层打算加S</li>
              <li>IX: 下层打算加X</li>
              <li>SIX: 当前加S, 下层加X</li>
            </ul>
          </li>
          <li>意向锁锁相容矩阵</li>
          <li>意向锁锁申请算法，意向锁锁释放算法: 对任何一个节点加锁, 必须先对其父节点加意向锁(也就是从根开始加)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>已经有的锁</th>
      <th>S</th>
      <th>X</th>
      <th>IS</th>
      <th>IX</th>
      <th>SIX</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>已经持有S</td>
      <td>✔</td>
      <td> </td>
      <td>✔</td>
      <td> </td>
      <td> </td>
      <td>S加了, 当前及其下层没有X</td>
    </tr>
    <tr>
      <td>已经持有X</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td>X排他, 加了别的都没有</td>
    </tr>
    <tr>
      <td>已经持有IS</td>
      <td>✔</td>
      <td> </td>
      <td>✔</td>
      <td>✔</td>
      <td>✔</td>
      <td>IS加了, 当前没X</td>
    </tr>
    <tr>
      <td>已经持有IX</td>
      <td> </td>
      <td> </td>
      <td>✔</td>
      <td>✔</td>
      <td> </td>
      <td>IX加了, 当前没S没X</td>
    </tr>
    <tr>
      <td>已经持有SIX</td>
      <td> </td>
      <td> </td>
      <td>✔</td>
      <td> </td>
      <td> </td>
      <td>SIX加了, 相当于同时S和IX</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>死锁的检测与预防
    <ul>
      <li>死锁: 每个事务持有部分锁, 循环等待</li>
      <li>活锁: 有部分事务长期等待锁, 其他事务可以继续运行</li>
      <li>死锁的检测及其处理办法
        <ul>
          <li>等待图法</li>
          <li>超时死锁检测法
            <ul>
              <li>锁申请等待超时</li>
              <li>事务执行超时</li>
            </ul>
          </li>
          <li>时间戳死锁检测法: (时间戳反映事务已经执行的时间)当T要等待U持有的锁
            <ul>
              <li>等待-死亡方案: T比U老, T等待; U比T老, 则T被回滚</li>
              <li>伤害-等待方案: T比U老, U回滚; U比T老, T等待</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="数据库恢复技术">数据库恢复技术</h2>

<ul>
  <li>数据库恢复的含义: 在数据库遭受破坏后及时进行恢复的功能</li>
  <li>方法: 不同介质上冗余存储，利用冗余信息恢复</li>
  <li>常用措施: 数据转储, 日志, 数据库镜像</li>
  <li>数据库故障的分类
    <ul>
      <li>小型: 事务内部故障, 不影响系统</li>
      <li>中型: 系统停止, 磁盘不坏, 重启靠日志能恢复
        <ul>
          <li>系统故障</li>
          <li>外部影响</li>
        </ul>
      </li>
      <li>大型: 内存磁盘严重破坏, 需要彻底恢复
        <ul>
          <li>磁盘故障</li>
          <li>计算机病毒</li>
          <li>黑客入侵</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>数据库故障恢复三大技术
    <ul>
      <li>数据转储: 定期将数据库中的内容复制到其它存储设备中去的过程</li>
      <li>日志: 自动记载数据库中修改型操作的数据更新情况的文件</li>
      <li>数据库镜像: 整个数据库中的数据实时复制到另一个磁盘</li>
    </ul>
  </li>
  <li>数据转储
    <ul>
      <li>静态转储</li>
      <li>
        <p>动态转储: 修改前记录原值</p>

        <blockquote>
          <p>需要结合日志恢复(记录转储开始和结束点, 事务更新的对象和前后值, 事务结束状态)</p>
        </blockquote>
      </li>
      <li>海量转储</li>
      <li>增量转储</li>
    </ul>
  </li>
  <li>日志：
    <ul>
      <li>内容: 事务标识、更新对象、更新前的值 和/或 更新后的值; 每个事务执行情况; 其他</li>
      <li>组成: 日志记录 的序列, 并发时, 各个事务的日志是交错的</li>
      <li>作用: 确保原子性, 实现增量转储, 实现故障恢复</li>
      <li>记载原则: 操作执行的先后次序, 先写日志, 后修改数据库</li>
      <li>在日志中设置检查点的作用: 降低数据库故障恢复的开销, 到<code class="language-plaintext highlighter-rouge">&lt;CKPT&gt;</code>就可以结束恢复过程
        <ul>
          <li>停止接收新任务 -&gt; 等待当前所有事物提交或终止 -&gt; 刷新日志到磁盘</li>
          <li>写入<code class="language-plaintext highlighter-rouge">&lt;CKPT&gt;</code> -&gt; 刷新日志到磁盘</li>
          <li>继续接收新事务</li>
        </ul>
      </li>
      <li>事务的撤销（UNDO）与重做（REDO）</li>
      <li>UNDO日志
        <ul>
          <li>UNDO日志的内容
            <ul>
              <li>开始事务: <code class="language-plaintext highlighter-rouge">&lt;Start T&gt;</code></li>
              <li>提交事务: <code class="language-plaintext highlighter-rouge">&lt;Commit T&gt;</code></li>
              <li>放弃事务: <code class="language-plaintext highlighter-rouge">&lt;Abort T&gt;</code></li>
              <li>更新记录: <code class="language-plaintext highlighter-rouge">&lt;T, X, V&gt;</code>事务T修改了X, 原值是V</li>
            </ul>
          </li>
          <li>记载规则: 更新记录 先于 更新操作; 事务提交 先于 提交日志</li>
          <li>作用: 用于被放弃事务(故障时中断的事务)的撤消工作</li>
          <li>基于UNDO日志的故障恢复流程
            <ul>
              <li>从后向前扫, 对每一个<code class="language-plaintext highlighter-rouge">&lt;T, X, V&gt;</code>:
                <ul>
                  <li>若<code class="language-plaintext highlighter-rouge">&lt;Commit T&gt;</code>被扫到过, 则继续扫</li>
                  <li>否则将X改成V</li>
                </ul>
              </li>
              <li>日志尾部为所有未结束事务写入<code class="language-plaintext highlighter-rouge">&lt;Abort T&gt;</code>, 刷新日志</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>REDO日志
        <ul>
          <li>REDO日志的内容: 跟UNDO一样, 唯一不同: 更新记录<code class="language-plaintext highlighter-rouge">&lt;T, X, V&gt;</code>中记载的是更新后的值</li>
          <li>记载规则: 修改前, 必须有更新记录和事务提交记录</li>
          <li>作用: 已提交事务的重做工作</li>
          <li>基于REDO日志的故障恢复流程
            <ul>
              <li>确定所有已提交的事务</li>
              <li>从前向后扫, 对每条更新
                <ul>
                  <li>如果未提交, 继续扫</li>
                  <li>如果提交了, 写入新值</li>
                </ul>
              </li>
              <li>日志尾部为所有未结束事务写入<code class="language-plaintext highlighter-rouge">&lt;Abort T&gt;</code>, 刷新日志</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>UNDO/REDO日志
        <ul>
          <li>UNDO/REDO日志的内容: 跟UNDO一样, 唯一不同: 更新记录<code class="language-plaintext highlighter-rouge">&lt;T, X, V, W&gt;</code>中记载前与后的值</li>
          <li>记载规则: 修改前需要有更新记录</li>
          <li>作用: 兼有两者</li>
          <li>基于UNDO/REDO日志的故障恢复流程
            <ul>
              <li>根据提交记录, 确定事务是否被提交
                <ul>
                  <li>按照从后往前的顺序，撤消(undo)所有未提交的事务</li>
                  <li>按照从前往后的顺序，重做(redo)所有已提交的事务</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>恢复策略
    <ul>
      <li>小型: 未结束的事务的undo</li>
      <li>中型: 非正常终止: undo; 完成提交: redo</li>
      <li>大型: 先用后备副本恢复, 之后用日志undo + redo</li>
    </ul>
  </li>
</ul>

<h1 id="第六章第七章">第六章&amp;第七章</h1>

<ul>
  <li>
    <p>游标管理</p>

    <ul>
      <li>游标的作用: 集合量逐个取出后送入应用程序变量内供其使用</li>
      <li>
        <p>定义: 查询结果为多个元组时, 必须使用游标获取每个元组</p>

        <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /></pre></td><td class="code"><pre><span class="line">EXEC SQL <span class="keyword">DECLARE</span> <span class="keyword">cursor</span>-<span class="keyword">name</span> <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br /><span class="line">	subquery</span><br /><span class="line">	[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> ...... ]</span><br /><span class="line">	[ <span class="keyword">FOR</span> { <span class="keyword">READ</span> <span class="keyword">ONLY</span> |</span><br /><span class="line">		   <span class="keyword">UPDATE</span> [ <span class="keyword">OF</span> columnname, ...... ] } ] ;</span><br /></pre></td></tr></tbody></table>
      </li>
      <li>
        <p>打开: <code class="language-plaintext highlighter-rouge">EXEC SQL OPEN agent_dollars</code></p>
      </li>
      <li>
        <p>使用</p>

        <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /></pre></td><td class="code"><pre><span class="line">while (TRUE) {		/* loop to fetch rows */</span><br /><span class="line">    exec  sql  fetch agent_dollars</span><br /><span class="line">                     into :agent_id, :dollar_sum;</span><br /><span class="line"></span><br /><span class="line">    printf("%s %11.2fn", agent_id, dollar_sum);</span><br /><span class="line">}				/* end fetch loop */</span><br /></pre></td></tr></tbody></table>
      </li>
      <li>
        <p>关闭: <code class="language-plaintext highlighter-rouge">exec sql whenever not found goto finish</code>定义结束, <code class="language-plaintext highlighter-rouge">exec sql close agent_dollars</code>关闭游标</p>
      </li>
      <li>
        <p>可滚动游标的定义</p>

        <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /></pre></td><td class="code"><pre><span class="line">EXEC  SQL  <span class="keyword">DECLARE</span>  cursor_name</span><br /><span class="line">  [ INSENSITIVE ]  [ <span class="keyword">SCROLL</span> ]</span><br /><span class="line">  <span class="keyword">CURSOR</span>  [ <span class="keyword">WITH</span>  HOLD ]  <span class="keyword">FOR</span></span><br /><span class="line">    subquery  { <span class="keyword">UNION</span>  subquery }</span><br /><span class="line">    [ <span class="keyword">ORDER</span>  <span class="keyword">BY</span> ...... ]</span><br /><span class="line">  [ <span class="keyword">FOR</span>  <span class="keyword">READ</span>  <span class="keyword">ONLY</span>  |</span><br /><span class="line">    <span class="keyword">FOR</span>  <span class="keyword">UPDATE</span>  <span class="keyword">OF</span>  columnname ...... ];</span><br /></pre></td></tr></tbody></table>
      </li>
      <li>
        <p>在数据更新命令中的使用</p>

        <table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /></pre></td><td class="code"><pre><span class="line">EXEC  SQL  FETCH</span><br /><span class="line">  [ { NEXT | PRIOR | FIRST | LAST |</span><br /><span class="line">    { ABSOLUTE | RELATIVE } value_spec } FROM ]</span><br /><span class="line">  cursor_name INTO ......;</span><br /></pre></td></tr></tbody></table>
      </li>
    </ul>
  </li>
  <li>
    <p>索引 (index)</p>

    <ul>
      <li>B+索引的数据结构: 定义秩为n
        <ul>
          <li>结点: 取$m\leq n$, 结点含有m个键$K_i$和m+1个指针$P_i$, 五花肉式存放,</li>
          <li>约束
            <ul>
              <li>叶节点: $\lfloor (n+1)/2\rfloor\leq m\leq n, P_i$指向$K_i$, $P_{m+1}$指向下一个叶子</li>
              <li>根结点: $1\leq m\leq n$; 内部结点: $\lceil (n-1)/2\rceil\leq m\leq n, P_i$均指向子树根节点</li>
            </ul>
          </li>
          <li>性质
            <ul>
              <li>非叶节点, 在$P_i$所指子树的任意关键字K, 有$K_{i-1}\leq K&lt; K_i$</li>
              <li>只有一个结点, 则根节点也是叶节点; 否则, 根节点跟内部节点类似</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>搜索算法
        <ul>
          <li>随机查找
            <ul>
              <li>结点上的关键字划分了值域, 层层向下在相应区间中搜索合适的叶节点, 最后在叶结点遍历搜索</li>
            </ul>
          </li>
          <li>区间查找
            <ul>
              <li>先找区间下限a, 之后在叶节点(类似链表)中遍历, 直到超过上限b</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="第八章关系数据库规范化理论">第八章:关系数据库规范化理论</h1>

<h2 id="概述">概述</h2>

<ul>
  <li>模式设计质量的评价指标
    <ul>
      <li>数据冗余度: 合理的数据冗余度</li>
      <li>插入/删除等更新异常: 没有插入和删除操作异常</li>
    </ul>
  </li>
  <li>关系的规范化
    <ul>
      <li>按照给定范式要求设计关系模式</li>
      <li>
        <p>范式: 对一个关系中允许存在的函数依赖的要求</p>

        <h2 id="规范化理论">规范化理论</h2>
      </li>
    </ul>
  </li>
</ul>

<h3 id="函数依赖fd">函数依赖（FD）</h3>

<ul>
  <li>函数依赖: 一个关系中 两组属性之间的 取值约束
    <ul>
      <li>表示: $X\to Y$: Y函数依赖于X</li>
      <li>直观: 在关系$R$中, 每个$X$的值都有唯一的一个$Y$值与之对应</li>
      <li>定义: 关系模式$R(U)$中, 关系$r$中元组$r_i$在$X$中的取值确定后, $Y$中取值必被确定, 则$X\to Y$</li>
      <li>$X$决定因素, $Y$依赖因素</li>
    </ul>
  </li>
  <li>发现函数依赖
    <ul>
      <li>直接根据语义</li>
      <li>根据取值对应关系
        <ul>
          <li>一一对应: $X\to Y, Y\to X$</li>
          <li>一多对应/多一对应: $Y\to X, X\to Y$</li>
          <li>多多对应: 没有</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>平凡函数依赖
    <ul>
      <li>非平凡函数依赖: $X\to Y, Y\not\subseteq X$, 默认是这个</li>
      <li>平凡函数依赖: 反之</li>
    </ul>
  </li>
  <li>完全函数依赖
    <ul>
      <li>完全函数依赖: $X\to Y, \forall X’\subset X, X’\not\to Y$, 则$X\overset{f}{\to}Y$</li>
      <li>部分函数依赖: $X\to Y, \exists X’\subset X, X’\to Y$, 则$X\overset{p}{\to}Y$</li>
    </ul>
  </li>
  <li>传递函数依赖
    <ul>
      <li>$X\to Y, Y\not\subset X, Y\not\to X, Y\to Z$, 则 $X\to Z$为传递函数依赖</li>
    </ul>
  </li>
  <li>Armstrong公理系统
    <ul>
      <li>基本规则
        <ul>
          <li>自反规则: $Y\subseteq X$, 则$X\to Y$</li>
          <li>增广规则: $X\to Y$, 则$XZ\to YZ$</li>
          <li>传递规则: $X\to Y\wedge Y\to Z$, 则$X\to Z$</li>
        </ul>
      </li>
      <li>扩充规则
        <ul>
          <li>分解规则: $X\to YZ$, 则$X\to Y\wedge X\to Z$</li>
          <li>合并规则: $X\to Y\wedge X\to Z$则$X\to YZ$</li>
          <li>伪传递规则:$X\to Y\wedge WY\to Z$, 则$WX\to Z$</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>函数依赖的逻辑蕴含概念
    <ul>
      <li>F为关系模式R(U)的一个函数依赖集</li>
      <li>从已有的函数依赖出发, 利用公理系统可以推导出$X\to Y$, 则$F\vDash X\to Y$</li>
    </ul>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>函数依赖集F的闭包$F^+$: $F^+={X\to Y</td>
          <td>F\vDash X\to Y}$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>函数依赖集的等价
    <ul>
      <li>可以互相推导出其中的函数依赖</li>
    </ul>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>属性集X在函数依赖集$F^+$上的闭包$X_F^+$: $X_F^+={A</td>
          <td>F\vDash X\to A}$</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>[解题] 计算闭包
        <ul>
          <li>$X^+=X$</li>
          <li>不断重复: 对每一个F中的依赖$Y\to Z$, 若$Y\subseteq X^+$, 则$X^+ = X^+ \cup Z$</li>
          <li>直到不再变化</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>关键字
    <ul>
      <li>若$K\subseteq U$, $K\overset{f}{\to}U$, 则K是R的关键字</li>
      <li>主属性集: 所有关键字中的属性构成的集合</li>
      <li>非主属性集: 不属于任何一个关键字的属性构成的集合</li>
      <li>关键字与闭包: $K_F^+=U, \forall Z\subset F, Z_F^+\ne U$</li>
      <li>[解题] 寻找关键字
        <ul>
          <li>计算最小依赖集</li>
          <li>不断重复从U中删除属性, 直到其闭包不等X于U</li>
          <li>将得到一个关键字</li>
          <li>技巧
            <ul>
              <li>只在左边出现过的属性 属于 每一个关键字</li>
              <li>只在右边出现过的属性 不属于 任何一个关键字</li>
              <li>只需要对两边都有的属性尝试删除即可</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="与函数依赖有关的范式">与函数依赖有关的范式</h3>

<ul>
  <li>模式分解
    <ul>
      <li>分解结果: 子关系模式, 满足
        <ul>
          <li>$\textrm{Head}(R)=\bigcup^n\textrm{Head}(R_i)$</li>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>$F_i={X\to Y</td>
                  <td>X\to Y\in F^+ \wedge (X\cup Y)\in \textrm{Head}(R_i)}$</td>
                </tr>
              </tbody>
            </table>
          </li>
        </ul>
      </li>
      <li>分解方法
        <ul>
          <li>找出所有不满足范式的依赖</li>
          <li>选择一个依赖, 设$X\overset{f}{\to}Y$为这个依赖, 则将这个依赖所在的关系R分解为
            <ul>
              <li>$R_1={X\cup Y, {X\to Y}}$</li>
              <li>$R_2={\textrm{Head}(R)-Y, F_2}$</li>
              <li>
                <table>
                  <tbody>
                    <tr>
                      <td>其中$F_2={A\to B</td>
                      <td>A\to B\in F^+\wedge (A\cup B)\subseteq \textrm{Head}(R_2)}$</td>
                    </tr>
                  </tbody>
                </table>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>1NF: 属性值不可分割, 全都满足</li>
  <li>2NF: 满足1NF, 每个非主属性都完全依赖于关键字
    <ul>
      <li>检查:
        <ul>
          <li>找到所有非主属性和所有候选关键字</li>
          <li>检查每一个非主属性A和每一个候选关键字K之间的函数依赖, 看看有没有部分依赖</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>3NF: 满足2NF, 每个非主属性都不传递依赖于关键字
    <ul>
      <li>检查: 不满足3NF, 则必然存在下列情况之一, 其中$X\overset{f}{\to} Y$,$Y$是非主属性
        <ul>
          <li>X是某个关键字的真子集</li>
          <li>X不是关键字</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>BCNF: 满足1NF, 若$X\to Y$则X必含有该模式的关键字
    <ul>
      <li>检查: 每个函数依赖, 是否满足X含有关键字</li>
      <li>BCNF -&gt; 3NF</li>
    </ul>
  </li>
  <li>理解各级范式与数据冗余度、插入/删除异常的关系
    <ul>
      <li>插入删除异常: 3NF消除异常</li>
      <li>冗余: 2NF存在冗余, 3NF冗余较小</li>
    </ul>
  </li>
</ul>

<h3 id="多值依赖与第四范式">多值依赖与第四范式</h3>

<ul>
  <li>多值依赖: $X\to\to Y$
    <ul>
      <li>定义: 对X的一个取值, 存在一组Y与其对应; Y的取值与$U-X-Y$不相关</li>
      <li>成因: 两个一对多关系$C\to T$, $C\to L$, 其合并后T与L就是多值依赖</li>
      <li>平凡多值依赖
        <ul>
          <li>非平凡多值依赖: $U-X-Y$不为空集</li>
          <li>平凡多值依赖: 反之</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>多值依赖有关的推理规则(需要掌握)
    <ul>
      <li>求补规则: 若$X\to\to Y$, 则$U-X-Y\to\to Y$</li>
      <li>转换规则: 若$X\to Y$, 则$X\to\to Y$</li>
    </ul>
  </li>
  <li>4NF
    <ul>
      <li>定义: 若$X\to\to Y$是非平凡多值依赖, 则X必含有关键字</li>
      <li>特点: 函数依赖需要满足BCNF; 不是函数依赖的多值依赖只有平凡多值依赖</li>
    </ul>
  </li>
</ul>

<h2 id="规范化所引起的一些问题">规范化所引起的一些问题</h2>

<ul>
  <li>函数依赖的逻辑蕴涵: 函数依赖集的逻辑蕴含</li>
  <li>函数依赖集的等价: 可以互相推导出其中的函数依赖</li>
  <li>最小函数依赖集
    <ul>
      <li>与F等价的, 最小的集合</li>
    </ul>
  </li>
  <li>最小函数依赖集的计算算法
    <ul>
      <li>首先得到题目中的所有函数依赖, 分解成右端只有一个的依赖</li>
      <li>消除部分函数依赖: 右边相同, 左边更多; 左边含右</li>
      <li>消除冗余函数依赖: 能推导就是冗余</li>
      <li>合并依赖</li>
    </ul>
  </li>
  <li>无损联结性
    <ul>
      <li>设$\rho={R_1,\cdots,R_k}$是对$R$的一个分解</li>
      <li>如果对每个满足F的关系实例r都满足$r=\pi_{R_1}(r)\Join\cdots\Join\pi_{R_k}(r)$</li>
      <li>则$\rho$是无损联接分解</li>
      <li>充要条件($\rho={R_1,R_2}$)
        <ul>
          <li>$R_1\cap R_2\to (R_1-R_2)$ 或 $R_1\cap R_2\to (R_2-R_1)$</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>依赖保持性
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>表示$\pi_Z(F)={X\to Y</td>
              <td>X\to Y\in F^+\wedge (X\cup Y)\subseteq Z}$</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>$F^+=(\pi_{R_1}(F)\cup\cdots\cup\pi_{R_1}(F))^+$</li>
    </ul>
  </li>
  <li>直接到3NF且满足无损联结性和依赖保持性的模式分解算法
    <ul>
      <li>计算最小依赖集, 代替FFF进行分解</li>
      <li>$S=\emptyset$</li>
      <li>对每一个函数$X\to Y$依赖进行
        <ul>
          <li>若在S中找不到子关系模式Z, 使得$X\cup Y\subseteq\textrm{Head}(Z)$</li>
          <li>X和Y合并成新的子关系模式, 加入S</li>
        </ul>
      </li>
      <li>如果R中的每个候选关键字K均不在S中, 则任选一个关键字, 其属性单独构成一个子关系模式, 加入S</li>
    </ul>
  </li>
  <li>从3NF到BCNF、4NF的分解方法
    <ul>
      <li>找不满足所求NF的函数依赖(多值依赖), 分解之</li>
    </ul>
  </li>
</ul>

<h1 id="第九章数据库设计">第九章:数据库设计</h1>

<h2 id="数据库设计概述">数据库设计概述</h2>

<ul>
  <li>数据库设计的基本任务
    <ul>
      <li>根据用户对象的信息需求、处理需求和数据库的支持环境（包括硬件、操作系统与DBMS）设计出数据模式</li>
    </ul>
  </li>
  <li>数据库的生命周期
    <ul>
      <li>需求分析: 数据库设计的第1阶段</li>
      <li>概念设计: 数据库设计的第2阶段</li>
      <li>逻辑设计: 数据库设计的第3阶段 &lt;—– DBMS模型</li>
      <li>物理设计: 数据库设计的第4阶段 &lt;—– 软件, 硬件和网络</li>
      <li>编码</li>
      <li>测试</li>
      <li>运行</li>
      <li>进一步修改</li>
    </ul>
  </li>
</ul>

<h2 id="数据库设计的需求分析">数据库设计的需求分析</h2>

<ul>
  <li>需求说明书
    <ul>
      <li>用户单位对数据的需求 -&gt;</li>
      <li>需求分析(确定数据库中保存信息的客观事物和相互关系) -&gt;
        <ul>
          <li>事物, 事物属性, 事物关系</li>
        </ul>
      </li>
      <li>需求分析说明书</li>
    </ul>
  </li>
</ul>

<h2 id="数据库的概念设计">数据库的概念设计</h2>

<ul>
  <li>数据库概念设计的过程
    <ul>
      <li>用户分解: 用户 -&gt; 功能独立的用户组</li>
      <li>视图设计: 根据用户需求设计视图</li>
      <li>视图集成: 局部视图*n -&gt; 全局视图</li>
    </ul>
  </li>
  <li>E-R模型: 实体，属性，联系</li>
  <li>EE-R模型: E-R + 嵌套（实体集属性）、继承</li>
</ul>

<h2 id="数据库的逻辑设计">数据库的逻辑设计</h2>

<ul>
  <li>从E－R模型和扩充E－R模型向关系模型的转换
    <ul>
      <li>实体集: 关系模式</li>
      <li>联系: 关系</li>
    </ul>
  </li>
  <li>对转换得到的关系模式进行规范化设计
    <ul>
      <li>根据给定的数据完整性约束发现函数依赖（最小函数依赖集）: 第八章内容</li>
      <li>关键字的计算: 第八章内容</li>
      <li>范式的判断及分解: 第八章内容, 至少满足3NF才行</li>
    </ul>
  </li>
</ul>

<h2 id="数据库的物理设计">数据库的物理设计</h2>

<ul>
  <li>索引: 将文件中的记录与其物理地址(即磁盘块)间建立一张对应关系表</li>
  <li>作用: 加速</li>
  <li>设计策略
    <ul>
      <li>在主关键字及外关键字上建立索引: 提速联接查询; 利于检查完整性</li>
      <li>读为主的关系应尽可能多地建立索引</li>
      <li>属性的等值查询所得到的结果元组数量较少，则可以考虑对该属性建立索引</li>
      <li>经常用于统计查询的属性建立索引</li>
    </ul>
  </li>
</ul>

<h1 id="答题解法">答题解法</h1>

<hr />

<ul>
  <li>基本概念表示: 图形内写名称
    <ul>
      <li>实体集: 矩形框</li>
      <li>属性: 椭圆
        <ul>
          <li>关键字: 椭圆, 属性名加下划线</li>
        </ul>
      </li>
      <li>联系: 菱形框</li>
    </ul>
  </li>
  <li>连线与标注
    <ul>
      <li>属性与实体: 无向线段, 一个实体&lt;-&gt;多个属性; 连线上标注 属性基数( , )</li>
      <li>联系上的属性: 无向线段, 一个联系&lt;-&gt;多个属性; 因联系而产生的属性</li>
      <li>实体与联系: 无向线段, 多个实体&lt;-&gt;多个联系; 连线上标注 参与基数( , )</li>
    </ul>
  </li>
  <li>其他
    <ul>
      <li>联系上有太多属性和实体, 可以把这个联系变成实体, 与实体的连线变成新的联系</li>
    </ul>
  </li>
</ul>

<h2 id="关系代数和关系演算">关系代数和关系演算</h2>

<h3 id="关系代数">关系代数</h3>

<ul>
  <li>解题步骤
    <ul>
      <li>确定查询目标（结果关系中的属性）</li>
      <li>明确查询条件</li>
      <li>选择从条件到目标的查找路径，并据此确定操作对象，即:
        <ul>
          <li>在操作过程中需要使用到那些关系?</li>
          <li>这些关系又是如何被联接成一个关系的?</li>
        </ul>
      </li>
      <li>关系的合并
        <ul>
          <li>根据步骤 3) 的分析结果进行关系的联接</li>
        </ul>
      </li>
      <li>元组的选择
        <ul>
          <li>根据步骤 2) 的分析结果(查询条件)进行元组的选择: 用不着的尽快投影掉, 夜长梦多警告</li>
        </ul>
      </li>
      <li>属性的指定
        <ul>
          <li>根据步骤 1) 的分析结果执行投影操作: 别tm漏属性啊啊啊啊啊啊</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>解题技巧
    <ul>
      <li>“所有A都…的B”, 用除法, 被除的对象应当先投影, 以免遗漏</li>
      <li>用公共属性查私有属性, 先笛卡尔积, 之后用选择, 条件设为同名属性取值相等, 最后投影</li>
      <li>正面难构造, 就构造反面, 然后用笛卡尔积减去反面</li>
      <li>最大值最小值, 例子: 取C中最大, C为key-value对
D := C
$M = C - \pi_{C.key,C.val}\sigma_{C.val &lt; D.val}(C\times D)$
原理: 每取值跟所有取值比较, 存在更大就会保留, 找出所有的非最大值, 之后减去</li>
      <li>同时满足多个条件, 则取交; 满足多个条件中的一个, 则取并</li>
      <li>联接可以实现”之一”的效果, 也可以实现相等关系</li>
      <li>差运算
        <ul>
          <li>当查询条件带有‘否定’语义，或者具有明显的‘排它性’的时候，通常需要使用两个子查询之间的‘差’运算</li>
          <li>‘差’运算的运算对象（关系）中，通常需要包含其关键字</li>
        </ul>
      </li>
      <li>“笛卡尔积/θ-连接/自然连接”的使用方法
        <ul>
          <li>都是关系的合并运算
            <ul>
              <li>笛卡尔积是基本运算，θ-连接和自然连接则是扩充运算, 请注意三者的结果关系的关系模式之间的区别</li>
            </ul>
          </li>
          <li>笛卡尔积
            <ul>
              <li>是实现跨不同关系表进行数据访问的基础, 在笛卡尔积的结果关系中，存在着很多无意义的结果元组，通常需要通过后续的选择运算过滤掉</li>
            </ul>
          </li>
          <li>θ-连接
            <ul>
              <li><strong>相邻的“笛卡尔积+选择运算”可以合并为一个θ-连接</strong></li>
            </ul>
          </li>
          <li>自然连接
            <ul>
              <li>如果连接条件是基于“两张表中的所有同名属性的相等比较”，可以将θ-连接进一步简写为自然连接</li>
            </ul>
          </li>
          <li>一般方法: 笛卡尔积+选择 or θ-连接
            <ul>
              <li>不存在同名属性，或者连接条件不是基于同名属性的相等比较</li>
              <li>在结果关系中可能存在同名属性，需要加以区别</li>
            </ul>
          </li>
          <li>常用方法: 自然连接
            <ul>
              <li>连接条件是隐含的（所有同名属性的相等比较）</li>
              <li>如果在两个关系之间存在多对‘同名属性’，而本次查询又不需要‘所有’的同名属性都相等，此时有两种选择:</li>
              <li>采用前述的一般方法来实现关系的合并</li>
              <li><strong>先对其中的一个关系执行投影运算</strong>，过滤掉其中不需要相等的那些同名属性，然后再使用自然连接运算</li>
            </ul>
          </li>
          <li>难点: 关系的自连接
            <ul>
              <li>使用<strong>赋值运算定义‘同质不同名’的两个中间关系</strong>(元组集合相同，但关系名不同)，当然也可以对中间关系中的属性进行重命名</li>
              <li>然后再使用前述的一般方法实现两个中间关系的合并</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>除
        <ul>
          <li>‘除’ 运算与‘联接’运算的区别</li>
          <li>我们将查询的结果关系称为‘目标对象’，用于定义查询条件的关系称为‘条件对象’</li>
          <li>在决定某个元组t是否属于结果关系时，
            <ul>
              <li>如果只需要从条件对象中找到<strong>一个元组</strong>c并使得查询条件成立，那么就直接使用‘联接’运算（包括笛卡尔积、θ-连接和自然连接）</li>
              <li>如果需要条件对象集中的<strong>所有元组</strong>都能使得查询条件成立，那么就使用‘除’运算</li>
            </ul>
          </li>
          <li>‘除’ 运算表达式的表示方法
            <ul>
              <li>被除数关系中必须包含目标对象和条件对象的<strong>关键字</strong></li>
              <li>除数关系中只含条件对象的关键字</li>
              <li>被除数和除数关系中<strong>不能含其它‘不必要’的多余属性</strong>, 先投影再除</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="关系演算-1">关系演算</h3>

<ul>
  <li>从关系代数进行转换
    <ul>
      <li>基于关系演算的数据查询表示</li>
      <li>投影
$\pi_{A_{1},A_{2},\cdots,A_{k}}(R)=\exists x_{k+1},x_{k+2},\cdots ,x_n(R(x_1,x_2,\cdots,x_n))$</li>
      <li>选择
$\sigma_F(R)=R(x_1,x_2,\cdots,x_n)\wedge F$
        <ul>
          <li>相等比较可以直接用常量代替: $\sigma_{x_1=’a’}(R)=R(‘a’,x_2,\cdots,x_n)\wedge F$</li>
        </ul>
      </li>
      <li>笛卡尔积
$R\times S = R(p)\wedge S(q)$</li>
      <li>$\theta$-联接
$R\underset{F}{\bowtie} S = R(p)\wedge S(q)\wedge F$</li>
      <li>自然联接
$R\bowtie S = R(x,y,z)\wedge S(t,u,v)$</li>
      <li>自联接, 重命名
$R(x, g_1)\wedge R(x, g_2)$</li>
      <li>除法
$R\div S=\forall y(S(y)\rightarrow R(x,y))$</li>
      <li>删除
$R-S = R(u)\wedge \neg S(u)$</li>
      <li>插入
$R\cup S = R(t)\vee S(t)$</li>
      <li>修改 = 删除再插入</li>
    </ul>
  </li>
  <li>直接构造: 不会玩
    <ul>
      <li>根据题目中的约束, 直接构造公式, 约束元组</li>
      <li>刚刚才学到的技巧：蕴含
        <ul>
          <li>之前说是除法嘛, 其实不仅仅是除法, 表示 任意-都/仅仅 都可以</li>
          <li>在全称量词后面, 使用蕴含, 记得把蕴含条件的多余变元先 存在掉, 只留下前面限定过的(之前有谓词/量词), 被蕴含的那个也是</li>
          <li>全称蕴含外面, 有必要的话, 再补一个谓词</li>
          <li>别TM在全称里面用 且, 根本不可能满足的</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="规范化设计">规范化设计</h2>

<h3 id="函数依赖">函数依赖</h3>

<ul>
  <li>找函数依赖: 随缘, 真的很迷, 不考虑常识, 做卷子的一点体会
    <ul>
      <li>一对多, 多-&gt;一应该有一个函数依赖</li>
      <li>一对一, 2个依赖妥妥的</li>
      <li>多值依赖: 两个一多, 这里可能会有一个多值依赖, 那两个一之间</li>
    </ul>
  </li>
  <li>最小依赖集
    <ul>
      <li>拆 -&gt; 消部分/平凡 -&gt; 消冗余(楞猜) -&gt; 合并</li>
    </ul>
  </li>
  <li>关键字
    <ul>
      <li>
        <p>只在左, 必在关键字; 只在右, 不在关键字; 都有, 挨个讨论</p>

        <h3 id="规范化设计-1">规范化设计</h3>
      </li>
    </ul>
  </li>
  <li>条件: 关键在于非主属性(不在任何关键字的属性)
    <ul>
      <li>不满足2NF: 非主属性依赖于一个关键字的子集</li>
      <li>不满足3NF: 非主属性依赖于一个关键字的子集 或 非主属性依赖于非关键字</li>
      <li>不满足4NF: 能找到多值依赖(非平凡)</li>
      <li>不满足BCNF: 任何依赖左边不是其关键字</li>
    </ul>
  </li>
  <li>注意!分解得到的新关系, 得重新找关键字和非主属性, 在判断满不满足更高要求的范式</li>
</ul>

<h2 id="事务和并发">事务和并发</h2>

<h3 id="能不能冲突串行">能不能冲突串行</h3>

<ul>
  <li>优先图: 顶点是事务, 有向边是优先关系</li>
  <li>找出全部对象, 对每个对象
    <ul>
      <li>列出所有对这个对象的操作, 看每一对相邻的操作</li>
      <li>有至少一个是写操作, 则构成一个优先关系, 优先图画一个有向边</li>
    </ul>
  </li>
  <li>
    <p>图中有向边有环, 则不能冲突串行化, 否则可以, 按照图中的偏序关系, 依次执行各个事务就得到可行的串行调度</p>

    <h3 id="能不能视图串行">能不能视图串行</h3>
  </li>
  <li>整一个串行调度出来, 一般按照每个对象谁先读, 定一个初步的优先关系</li>
  <li>三个条件, 若原调度视图等价于这个串行调度, 那就视图可串行
    <ul>
      <li>对每个对象, 哪个事务读初始值, 两个调度一样</li>
      <li>对每个事务的每次读, 两个调度的读取结果一样(指来自同一个事务的同一次写)</li>
      <li>对每个对象, 哪个事务最后写, 两个调度一样</li>
    </ul>
  </li>
</ul>

:ET